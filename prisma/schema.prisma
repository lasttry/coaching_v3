// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([sessionToken])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(CLIENT)
  active        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Clube padrão para login automático
  defaultClubId String?
  defaultClub   Club?     @relation("UserDefaultClub", fields: [defaultClubId], references: [id])
  
  accounts      Account[]
  sessions      Session[]
  clubUsers     ClubUser[]
}

model Club {
  id              String   @id @default(cuid())
  name            String
  shortName       String
  image           String?  // Base64 encoded image
  foregroundColor String   @default("#000000")
  backgroundColor String   @default("#FFFFFF")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  seasons         Season[]
  clubUsers       ClubUser[]
  defaultUsers    User[]   @relation("UserDefaultClub")
}

model Season {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime?
  active    Boolean  @default(true)
  clubId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@unique([clubId, name])
}

model ClubUser {
  id       String   @id @default(cuid())
  userId   String
  clubId   String
  role     ClubRole @default(MEMBER)
  joinedAt DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@unique([userId, clubId])
}

enum Role {
  ADMIN
  COACH
  CLIENT
}

enum ClubRole {
  OWNER
  MANAGER
  COACH
  MEMBER
}